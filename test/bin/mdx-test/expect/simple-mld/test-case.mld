{[
  # List.map (fun x -> x * x) [(1 + 9); 2; 3; 4];;
  - : int list = [100; 4; 9; 16]
]}

{[List.map (fun x -> x * x) [1; 2; 3]]}


{[
  let my_list = [1; 2; 3] in
  let the_list = 0 :: my_list in
  List.map (fun x -> x * x) the_list;;
  let another_phrase = "foo";;
  let the = "the" in
  let last = "last" in
  let phrase = "phrase" in
  print_endline (String.concat " " [the; last; phrase])
]}

With the optional header:

{@ocaml[
  # List.map (fun x -> x * x) [(1 + 9); 2; 3];;
  - : int list = [100; 4; 9]
  # List.map (fun x -> x * x) [1; 2; 3];;
  - : int list = [1; 4; 9]
]}

A shell block:

{@sh set-FOO=Hello,set-BAR=Bash[
  $ echo $FOO $BAR
  Hello Bash
]}

A block that doesn't run:

{@text[
  # 1
  = 2 ?
]}

The next one should fail because [my_list] wasn't defined in env [e1].

{@ocaml env=e1[
  # my_list;;
  Line 1, characters 1-8:
  Error: Unbound value my_list
]}

Indentation test:

{@ocaml[
  # let x =
    if true then
      1
    else
      2
  val x : int = 1
]}

{delim@ocaml[
  let f = 1 + "2"
]delim[
{err@mdx-error[
Line 1, characters 15-18:
Error: This expression has type string but an expression was expected of type
         int
]err}]}


{@ocaml ocaml[
  #require "astring";;
  let x = Astring.strf;;
]}


{[
  # x;;
  - : ('a, Format.formatter, unit, string) format4 -> 'a = <fun>
]}
