(alias
 (name   runtest)
 (deps   (:x section.md) (:y section.md.expected) (package mdx))
 (action (progn
           (run mdx test -s Testing %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x labels.md) (:y labels.md.expected) (package mdx))
 (action (progn
           (run mdx test -s Testing %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x pp.md) section.md (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x envs.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x spaces.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x errors.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x heredoc.md) section.md (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x mlt.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x semisemi.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x exit.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x padding.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x multilines.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x lines.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x lwt.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x non-det.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x code.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x dir.md) (package mdx))
 (action (progn
           (run mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x dir.md) (:y dir.md.expected) (package mdx))
 (action (progn
           (run mdx test --root / %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x prelude.md) (package mdx))
 (action (progn
           (run mdx test --prelude-str "#require \"lwt\"" %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x sync_to_md.md) (:y sync_to_md.md.expected) (package mdx))
 (action (progn
           (run mdx test --direction=to-md %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x sync_to_ml.md) (:y sync_to_ml.md.expected)
         (:a sync_to_ml.ml) (:b sync_to_ml.ml.expected) (package mdx))
 (action (progn
           (run mdx test --direction=to-ml %{x})
           (diff? %{y} %{x}.corrected)
           (diff? %{b} %{a}.corrected))))

(rule
 (targets section.ml)
 (deps    (:x section.md) (package mdx))
 (action  (with-stdout-to %{targets} (run mdx pp %{x}))))

(executable (name section))

(rule (with-stdout-to section.out (run ./section.exe)))

(alias
 (name   runtest)
 (deps   (:x section.out) (:y section.out.expected))
 (action (diff? %{x} %{y})))

(include dune_rules.inc)

(rule
 (targets dune_rules.inc.gen)
 (deps    (source_tree test-cases) (:x dune_rules.md) (package mdx))
 (action  (with-stdout-to %{targets} (run mdx rule --direction=to-ml %{x}))))

(alias
 (name runtest)
 (action (diff dune_rules.inc dune_rules.inc.gen)))
